
Base Sensor Cluster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000102  00802000  00802000  0000053c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033c0  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002886  00000000  00000000  000039e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000905  00000000  00000000  0000626a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00006b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000219e  00000000  00000000  00006ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f5  00000000  00000000  00008e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00009333  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  14:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  40:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  50:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  54:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  64:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_25>
  68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  7c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  80:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  84:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  88:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  8c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  90:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  94:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  98:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  9c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  fc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 100:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 104:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 108:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 10c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 110:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 114:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 118:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 11c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 120:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 124:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 128:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 12c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 130:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 134:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 138:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 13c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 140:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 144:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 148:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 14c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 150:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 154:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 158:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 15c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 160:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 164:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 168:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 16c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 170:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 174:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 178:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 17c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 180:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 184:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 188:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 18c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 190:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 194:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 198:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 19c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_clear_bss>:
 208:	21 e2       	ldi	r18, 0x21	; 33
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
 210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
 212:	a2 30       	cpi	r26, 0x02	; 2
 214:	b2 07       	cpc	r27, r18
 216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
 218:	0e 94 de 01 	call	0x3bc	; 0x3bc <main>
 21c:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <_exit>

00000220 <__bad_interrupt>:
 220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <BMP280_Write>:
	for(uint8_t i = 0; i < size; i++)
	{
		RS232_OutputBuffer_Add(data[i]);
	}
	return;
}
 224:	92 e0       	ldi	r25, 0x02	; 2
 226:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 22a:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 22e:	e0 ec       	ldi	r30, 0xC0	; 192
 230:	f8 e0       	ldi	r31, 0x08	; 8
 232:	82 81       	ldd	r24, Z+2	; 0x02
 234:	88 23       	and	r24, r24
 236:	ec f7       	brge	.-6      	; 0x232 <BMP280_Write+0xe>
 238:	60 93 c3 08 	sts	0x08C3, r22	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 23c:	e0 ec       	ldi	r30, 0xC0	; 192
 23e:	f8 e0       	ldi	r31, 0x08	; 8
 240:	82 81       	ldd	r24, Z+2	; 0x02
 242:	88 23       	and	r24, r24
 244:	ec f7       	brge	.-6      	; 0x240 <BMP280_Write+0x1c>
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
 24c:	08 95       	ret

0000024e <BMP280_Read>:
 24e:	92 e0       	ldi	r25, 0x02	; 2
 250:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 254:	80 68       	ori	r24, 0x80	; 128
 256:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 25a:	e0 ec       	ldi	r30, 0xC0	; 192
 25c:	f8 e0       	ldi	r31, 0x08	; 8
 25e:	82 81       	ldd	r24, Z+2	; 0x02
 260:	88 23       	and	r24, r24
 262:	ec f7       	brge	.-6      	; 0x25e <BMP280_Read+0x10>
 264:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 268:	e0 ec       	ldi	r30, 0xC0	; 192
 26a:	f8 e0       	ldi	r31, 0x08	; 8
 26c:	82 81       	ldd	r24, Z+2	; 0x02
 26e:	88 23       	and	r24, r24
 270:	ec f7       	brge	.-6      	; 0x26c <BMP280_Read+0x1e>
 272:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
 27c:	08 95       	ret

0000027e <BMX055_Write>:
 27e:	81 11       	cpse	r24, r1
 280:	04 c0       	rjmp	.+8      	; 0x28a <BMX055_Write+0xc>
 282:	84 e0       	ldi	r24, 0x04	; 4
 284:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 288:	0b c0       	rjmp	.+22     	; 0x2a0 <BMX055_Write+0x22>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	21 f4       	brne	.+8      	; 0x296 <BMX055_Write+0x18>
 28e:	88 e0       	ldi	r24, 0x08	; 8
 290:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <BMX055_Write+0x22>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	a1 f4       	brne	.+40     	; 0x2c2 <BMX055_Write+0x44>
 29a:	80 e1       	ldi	r24, 0x10	; 16
 29c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 2a0:	60 93 c3 08 	sts	0x08C3, r22	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 2a4:	e0 ec       	ldi	r30, 0xC0	; 192
 2a6:	f8 e0       	ldi	r31, 0x08	; 8
 2a8:	82 81       	ldd	r24, Z+2	; 0x02
 2aa:	88 23       	and	r24, r24
 2ac:	ec f7       	brge	.-6      	; 0x2a8 <BMX055_Write+0x2a>
 2ae:	40 93 c3 08 	sts	0x08C3, r20	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 2b2:	e0 ec       	ldi	r30, 0xC0	; 192
 2b4:	f8 e0       	ldi	r31, 0x08	; 8
 2b6:	82 81       	ldd	r24, Z+2	; 0x02
 2b8:	88 23       	and	r24, r24
 2ba:	ec f7       	brge	.-6      	; 0x2b6 <BMX055_Write+0x38>
 2bc:	8c e1       	ldi	r24, 0x1C	; 28
 2be:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
 2c2:	08 95       	ret

000002c4 <BMX055_Read>:
 2c4:	81 11       	cpse	r24, r1
 2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <BMX055_Read+0xc>
 2c8:	84 e0       	ldi	r24, 0x04	; 4
 2ca:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 2ce:	0b c0       	rjmp	.+22     	; 0x2e6 <BMX055_Read+0x22>
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	21 f4       	brne	.+8      	; 0x2dc <BMX055_Read+0x18>
 2d4:	88 e0       	ldi	r24, 0x08	; 8
 2d6:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 2da:	05 c0       	rjmp	.+10     	; 0x2e6 <BMX055_Read+0x22>
 2dc:	82 30       	cpi	r24, 0x02	; 2
 2de:	c1 f4       	brne	.+48     	; 0x310 <BMX055_Read+0x4c>
 2e0:	80 e1       	ldi	r24, 0x10	; 16
 2e2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 2e6:	60 68       	ori	r22, 0x80	; 128
 2e8:	60 93 c3 08 	sts	0x08C3, r22	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 2ec:	e0 ec       	ldi	r30, 0xC0	; 192
 2ee:	f8 e0       	ldi	r31, 0x08	; 8
 2f0:	82 81       	ldd	r24, Z+2	; 0x02
 2f2:	88 23       	and	r24, r24
 2f4:	ec f7       	brge	.-6      	; 0x2f0 <BMX055_Read+0x2c>
 2f6:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 2fa:	e0 ec       	ldi	r30, 0xC0	; 192
 2fc:	f8 e0       	ldi	r31, 0x08	; 8
 2fe:	82 81       	ldd	r24, Z+2	; 0x02
 300:	88 23       	and	r24, r24
 302:	ec f7       	brge	.-6      	; 0x2fe <BMX055_Read+0x3a>
 304:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 308:	9c e1       	ldi	r25, 0x1C	; 28
 30a:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
 30e:	08 95       	ret
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret

00000314 <RS232_InputBuffer_Add>:
 314:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <RS232_input_index>
 318:	9f 5f       	subi	r25, 0xFF	; 255
 31a:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <RS232_input_index>
 31e:	e0 91 01 20 	lds	r30, 0x2001	; 0x802001 <RS232_input_index>
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	ee 5f       	subi	r30, 0xFE	; 254
 326:	ff 4d       	sbci	r31, 0xDF	; 223
 328:	80 83       	st	Z, r24
 32a:	08 95       	ret

0000032c <__vector_25>:
 32c:	1f 92       	push	r1
 32e:	0f 92       	push	r0
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	0f 92       	push	r0
 334:	11 24       	eor	r1, r1
 336:	2f 93       	push	r18
 338:	3f 93       	push	r19
 33a:	4f 93       	push	r20
 33c:	5f 93       	push	r21
 33e:	6f 93       	push	r22
 340:	7f 93       	push	r23
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	af 93       	push	r26
 348:	bf 93       	push	r27
 34a:	ef 93       	push	r30
 34c:	ff 93       	push	r31
 34e:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 352:	0e 94 8a 01 	call	0x314	; 0x314 <RS232_InputBuffer_Add>
 356:	ff 91       	pop	r31
 358:	ef 91       	pop	r30
 35a:	bf 91       	pop	r27
 35c:	af 91       	pop	r26
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	7f 91       	pop	r23
 364:	6f 91       	pop	r22
 366:	5f 91       	pop	r21
 368:	4f 91       	pop	r20
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <RS232_OutputBuffer_Add>:
 378:	90 91 00 20 	lds	r25, 0x2000	; 0x802000 <_edata>
 37c:	9f 5f       	subi	r25, 0xFF	; 255
 37e:	90 93 00 20 	sts	0x2000, r25	; 0x802000 <_edata>
 382:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <_edata>
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	ee 57       	subi	r30, 0x7E	; 126
 38a:	ff 4d       	sbci	r31, 0xDF	; 223
 38c:	80 83       	st	Z, r24
 38e:	08 95       	ret

00000390 <RS232_OutputBuffer_Send>:

// Transmits all items in the RS232 transmit buffer via USARTC0
void RS232_OutputBuffer_Send()
{
	for(uint8_t i = 0; i <= RS232_output_index; i++)
 390:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 394:	90 e0       	ldi	r25, 0x00	; 0
	{
		while(!(USARTC0.STATUS & 0x10));
 396:	e0 ea       	ldi	r30, 0xA0	; 160
 398:	f8 e0       	ldi	r31, 0x08	; 8
 39a:	81 81       	ldd	r24, Z+1	; 0x01
 39c:	84 ff       	sbrs	r24, 4
 39e:	fd cf       	rjmp	.-6      	; 0x39a <RS232_OutputBuffer_Send+0xa>
		USARTC0.DATA = RS232_output[i];
 3a0:	a9 2f       	mov	r26, r25
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	ae 57       	subi	r26, 0x7E	; 126
 3a6:	bf 4d       	sbci	r27, 0xDF	; 223
 3a8:	8c 91       	ld	r24, X
 3aa:	80 83       	st	Z, r24
}

// Transmits all items in the RS232 transmit buffer via USARTC0
void RS232_OutputBuffer_Send()
{
	for(uint8_t i = 0; i <= RS232_output_index; i++)
 3ac:	9f 5f       	subi	r25, 0xFF	; 255
 3ae:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 3b2:	89 17       	cp	r24, r25
 3b4:	90 f7       	brcc	.-28     	; 0x39a <RS232_OutputBuffer_Send+0xa>
	{
		while(!(USARTC0.STATUS & 0x10));
		USARTC0.DATA = RS232_output[i];
	}
	RS232_output_index = 0;
 3b6:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
 3ba:	08 95       	ret

000003bc <main>:

int main(void)
{
    // --------------------- Clock Configuration ---------------------
	// Enable 32 MHz clock and 32 kHz clock
	OSC.CTRL = OSC.CTRL | OSC_RC32MEN_bm | OSC_RC32KEN_bm;
 3bc:	e0 e5       	ldi	r30, 0x50	; 80
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	86 60       	ori	r24, 0x06	; 6
 3c4:	80 83       	st	Z, r24
	// Wait for clocks to stabilize
	while(OSC.STATUS != (OSC.STATUS | OSC_RC32MRDY_bm | OSC_RC32KRDY_bm));
 3c6:	91 81       	ldd	r25, Z+1	; 0x01
 3c8:	81 81       	ldd	r24, Z+1	; 0x01
 3ca:	86 60       	ori	r24, 0x06	; 6
 3cc:	98 13       	cpse	r25, r24
 3ce:	fb cf       	rjmp	.-10     	; 0x3c6 <main+0xa>
	// Set CPU clock to 32 MHz clock
	CCP = CCP_IOREG_gc;
 3d0:	88 ed       	ldi	r24, 0xD8	; 216
 3d2:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	// Enable 32 MHz clock DFLL
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
 3da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	// Disable 2 MHz clock
	OSC.CTRL = OSC.CTRL & ~OSC_RC2MEN_bm;
 3de:	e0 e5       	ldi	r30, 0x50	; 80
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	8e 7f       	andi	r24, 0xFE	; 254
 3e6:	80 83       	st	Z, r24

	// --------------------- I/O Pins Configuration ---------------------
	// Setup SPI SS pins on port A
	PORTA.DIRSET = 0x1E;
 3e8:	e0 e0       	ldi	r30, 0x00	; 0
 3ea:	f6 e0       	ldi	r31, 0x06	; 6
 3ec:	8e e1       	ldi	r24, 0x1E	; 30
 3ee:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = 0x1E;
 3f0:	85 83       	std	Z+5, r24	; 0x05
	// Setup USARTC0 and SPIC pins on port C
	PORTC.DIRSET = 0xB8;
 3f2:	e0 e4       	ldi	r30, 0x40	; 64
 3f4:	f6 e0       	ldi	r31, 0x06	; 6
 3f6:	88 eb       	ldi	r24, 0xB8	; 184
 3f8:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET = 0x38;
 3fa:	88 e3       	ldi	r24, 0x38	; 56
 3fc:	85 83       	std	Z+5, r24	; 0x05

	/* --------------------- PMIC Configuration --------------------- */
	// Enable medium and low priority interrupts
	PMIC.CTRL = PMIC_LOLVLEX_bm | PMIC_MEDLVLEN_bm;
 3fe:	83 e0       	ldi	r24, 0x03	; 3
 400:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

	/* --------------------- SPI Configuration --------------------- */
	// Enable SPIC as master, mode 0, and set speed to 4 MHz
	SPIC.CTRL = SPI_CLK2X_bm | SPI_ENABLE_bm | SPI_MASTER_bm | SPI_PRESCALER0_bm;
 404:	91 ed       	ldi	r25, 0xD1	; 209
 406:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>

	/* --------------------- USART Configuration --------------------- */
	// Set USCARTC0 receive interrupt to medium priority
	USARTC0.CTRLA = USART_RXCINTLVL_MED_gc;
 40a:	e0 ea       	ldi	r30, 0xA0	; 160
 40c:	f8 e0       	ldi	r31, 0x08	; 8
 40e:	90 e2       	ldi	r25, 0x20	; 32
 410:	93 83       	std	Z+3, r25	; 0x03
	// Set packet size to 8 bits
	USARTC0.CTRLC = USART_CHSIZE_8BIT_gc;
 412:	85 83       	std	Z+5, r24	; 0x05
	// Set baud rate to 115.2 kbs
	USARTC0.BAUDCTRLA = 0x83;
 414:	83 e8       	ldi	r24, 0x83	; 131
 416:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x0D << 4;
 418:	80 ed       	ldi	r24, 0xD0	; 208
 41a:	87 83       	std	Z+7, r24	; 0x07
	// Enable transmit and receive pins
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 41c:	88 e1       	ldi	r24, 0x18	; 24
 41e:	84 83       	std	Z+4, r24	; 0x04
	// Note that the USART defaults to no parity bit and 1 stop bit

	/* --------------------- BMP280 Configuration --------------------- */
	// Set barometer oversampling mode to high resolution (x8) and enable temperature sensor with no oversampling
	BMP280_Write(0xF4,0x33);
 420:	63 e3       	ldi	r22, 0x33	; 51
 422:	84 ef       	ldi	r24, 0xF4	; 244
 424:	0e 94 12 01 	call	0x224	; 0x224 <BMP280_Write>

	/* --------------------- BMX055 Configuration --------------------- */
	// Set accelerometer bandwidth to 125 Hz (probably ok?)
	BMX055_Write(0,0x10,0x0C);
 428:	4c e0       	ldi	r20, 0x0C	; 12
 42a:	60 e1       	ldi	r22, 0x10	; 16
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	0e 94 3f 01 	call	0x27e	; 0x27e <BMX055_Write>
	// Set accelerometer range to +/- 16 g
	BMX055_Write(0,0x0F,0x0C);
 432:	4c e0       	ldi	r20, 0x0C	; 12
 434:	6f e0       	ldi	r22, 0x0F	; 15
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 3f 01 	call	0x27e	; 0x27e <BMX055_Write>
	// Shut off accelerometer slow calibration in the z-axis because this definitely won't like constant acceleration
	BMX055_Write(0,0x36,0x03);
 43c:	43 e0       	ldi	r20, 0x03	; 3
 43e:	66 e3       	ldi	r22, 0x36	; 54
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	0e 94 3f 01 	call	0x27e	; 0x27e <BMX055_Write>
	// Set gyroscope output data rate to 200 Hz and filter bandwidth to 64 Hz (probably ok?)
	BMX055_Write(1,0x10,0x06);
 446:	46 e0       	ldi	r20, 0x06	; 6
 448:	60 e1       	ldi	r22, 0x10	; 16
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	0e 94 3f 01 	call	0x27e	; 0x27e <BMX055_Write>
	// Set gyroscope range to 500 degrees/s
	BMX055_Write(1,0x0F,0x02);
 450:	42 e0       	ldi	r20, 0x02	; 2
 452:	6f e0       	ldi	r22, 0x0F	; 15
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 3f 01 	call	0x27e	; 0x27e <BMX055_Write>
	// Set magnetometer x/y repetition to 47 and z repetition to 83 
	BMX055_Write(2,0x51,0x1B);
 45a:	4b e1       	ldi	r20, 0x1B	; 27
 45c:	61 e5       	ldi	r22, 0x51	; 81
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	0e 94 3f 01 	call	0x27e	; 0x27e <BMX055_Write>
	BMX055_Write(2,0x52,0x29);
 464:	49 e2       	ldi	r20, 0x29	; 41
 466:	62 e5       	ldi	r22, 0x52	; 82
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	0e 94 3f 01 	call	0x27e	; 0x27e <BMX055_Write>
	// Set magnetometer output data rate to 20 Hz
	BMX055_Write(2,0x4C,0x23);
 46e:	43 e2       	ldi	r20, 0x23	; 35
 470:	6c e4       	ldi	r22, 0x4C	; 76
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	0e 94 3f 01 	call	0x27e	; 0x27e <BMX055_Write>

	/* --------------------- Post-Configuration Tests --------------------- */
	// In order to check that each sensor is active and not dead/malfunctioning, verify the chip id of each sensor
	uint8_t test_results = 0;
	// Test BMP280
	if(BMP280_Read(0xD0) == 0x58) test_results |= 0x01;
 478:	80 ed       	ldi	r24, 0xD0	; 208
 47a:	0e 94 27 01 	call	0x24e	; 0x24e <BMP280_Read>
	uint8_t BMX055_gyro_en = 1;
	uint8_t BMX055_magnt_en = 1;

	/* --------------------- Post-Configuration Tests --------------------- */
	// In order to check that each sensor is active and not dead/malfunctioning, verify the chip id of each sensor
	uint8_t test_results = 0;
 47e:	c1 e0       	ldi	r28, 0x01	; 1
 480:	88 35       	cpi	r24, 0x58	; 88
 482:	09 f0       	breq	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 484:	c0 e0       	ldi	r28, 0x00	; 0
	// Test BMP280
	if(BMP280_Read(0xD0) == 0x58) test_results |= 0x01;
	// Test BMX055 Accelerometer
	if(BMX055_Read(0,0x00) == 0xFA) test_results |= 0x02;
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <BMX055_Read>
 48e:	8a 3f       	cpi	r24, 0xFA	; 250
 490:	09 f4       	brne	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 492:	c2 60       	ori	r28, 0x02	; 2
	// Test BMX055 Gyroscope
	if(BMX055_Read(1,0x00) == 0x0F) test_results |= 0x04;
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	0e 94 62 01 	call	0x2c4	; 0x2c4 <BMX055_Read>
 49c:	8f 30       	cpi	r24, 0x0F	; 15
 49e:	09 f4       	brne	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4a0:	c4 60       	ori	r28, 0x04	; 4
	// Test BMX055 Magnetometer
	if(BMX055_Read(2,0x40) == 0x32) test_results |= 0x08;
 4a2:	60 e4       	ldi	r22, 0x40	; 64
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <BMX055_Read>
 4aa:	82 33       	cpi	r24, 0x32	; 50
 4ac:	09 f4       	brne	.+2      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4ae:	c8 60       	ori	r28, 0x08	; 8
	// Report status to Primary Telemetry Computer
	RS232_OutputBuffer_Add(0x00);
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	0e 94 bc 01 	call	0x378	; 0x378 <RS232_OutputBuffer_Add>
	RS232_OutputBuffer_Add(test_results);
 4b6:	8c 2f       	mov	r24, r28
 4b8:	0e 94 bc 01 	call	0x378	; 0x378 <RS232_OutputBuffer_Add>
	// Enable interrupts
	sei();
 4bc:	78 94       	sei
			magnetometer_data[4] &= ~0x01;
			magnetometer_data[6] &= ~0x01;
			RS232_OutputBuffer_Add(0x04);
			RS232_OutputBuffer_MultiAdd(magnetometer_data,8);
		}
		RS232_OutputBuffer_Send();
 4be:	0e 94 c8 01 	call	0x390	; 0x390 <RS232_OutputBuffer_Send>
 4c2:	fd cf       	rjmp	.-6      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>

000004c4 <_exit>:
 4c4:	f8 94       	cli

000004c6 <__stop_program>:
 4c6:	ff cf       	rjmp	.-2      	; 0x4c6 <__stop_program>
