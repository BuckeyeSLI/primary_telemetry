
Base Sensor Cluster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000004ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031ff  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000027db  00000000  00000000  00003777  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000889  00000000  00000000  00005f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  000067dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000020ca  00000000  00000000  00006880  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003fe  00000000  00000000  0000894a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00008d48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
   8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
   c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  10:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  14:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  18:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  1c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  20:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  24:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  28:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  30:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  34:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  38:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  3c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  40:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  44:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  48:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  4c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  50:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  54:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  58:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  5c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  60:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  64:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  68:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  6c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  70:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  74:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  78:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  7c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  80:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  84:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  88:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  8c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  90:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  94:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  98:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  9c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  a8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  ac:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  b8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  bc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  c8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  cc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  d8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  dc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  e8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  ec:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  f8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
  fc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 100:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 104:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 108:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 10c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 110:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 114:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 118:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 11c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 120:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 124:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 128:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 12c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 130:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 134:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 138:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 13c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 140:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 144:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 148:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 14c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 150:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 154:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 158:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 15c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 160:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 164:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 168:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 16c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 170:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 174:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 178:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 17c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 180:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 184:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 188:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 18c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 190:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 194:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 198:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 19c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1a8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1ac:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1b8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1bc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1c8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1cc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1d8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1dc:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1e8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1ec:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f0:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
 1f8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62
 208:	0e 94 9f 01 	call	0x33e	; 0x33e <main>
 20c:	0c 94 2b 02 	jmp	0x456	; 0x456 <_exit>

00000210 <__bad_interrupt>:
 210:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000214 <BMP280_Write>:
		SPIC.DATA = 0x00;
		while(!(SPIC.STATUS & 0x80));
		data[i] = SPIC.DATA;
	}
	// Disable BMX055 SS
	PORTA.OUTSET = 0x1C;
 214:	92 e0       	ldi	r25, 0x02	; 2
 216:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 21a:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 21e:	e0 ec       	ldi	r30, 0xC0	; 192
 220:	f8 e0       	ldi	r31, 0x08	; 8
 222:	82 81       	ldd	r24, Z+2	; 0x02
 224:	88 23       	and	r24, r24
 226:	ec f7       	brge	.-6      	; 0x222 <BMP280_Write+0xe>
 228:	60 93 c3 08 	sts	0x08C3, r22	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 22c:	e0 ec       	ldi	r30, 0xC0	; 192
 22e:	f8 e0       	ldi	r31, 0x08	; 8
 230:	82 81       	ldd	r24, Z+2	; 0x02
 232:	88 23       	and	r24, r24
 234:	ec f7       	brge	.-6      	; 0x230 <BMP280_Write+0x1c>
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
 23c:	08 95       	ret

0000023e <BMP280_Read>:
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 244:	80 68       	ori	r24, 0x80	; 128
 246:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 24a:	e0 ec       	ldi	r30, 0xC0	; 192
 24c:	f8 e0       	ldi	r31, 0x08	; 8
 24e:	82 81       	ldd	r24, Z+2	; 0x02
 250:	88 23       	and	r24, r24
 252:	ec f7       	brge	.-6      	; 0x24e <BMP280_Read+0x10>
 254:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 258:	e0 ec       	ldi	r30, 0xC0	; 192
 25a:	f8 e0       	ldi	r31, 0x08	; 8
 25c:	82 81       	ldd	r24, Z+2	; 0x02
 25e:	88 23       	and	r24, r24
 260:	ec f7       	brge	.-6      	; 0x25c <BMP280_Read+0x1e>
 262:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
 26c:	08 95       	ret

0000026e <BMX055_Write>:
 26e:	81 11       	cpse	r24, r1
 270:	04 c0       	rjmp	.+8      	; 0x27a <BMX055_Write+0xc>
 272:	84 e0       	ldi	r24, 0x04	; 4
 274:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 278:	0b c0       	rjmp	.+22     	; 0x290 <BMX055_Write+0x22>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	21 f4       	brne	.+8      	; 0x286 <BMX055_Write+0x18>
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 284:	05 c0       	rjmp	.+10     	; 0x290 <BMX055_Write+0x22>
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	a1 f4       	brne	.+40     	; 0x2b2 <BMX055_Write+0x44>
 28a:	80 e1       	ldi	r24, 0x10	; 16
 28c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 290:	60 93 c3 08 	sts	0x08C3, r22	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 294:	e0 ec       	ldi	r30, 0xC0	; 192
 296:	f8 e0       	ldi	r31, 0x08	; 8
 298:	82 81       	ldd	r24, Z+2	; 0x02
 29a:	88 23       	and	r24, r24
 29c:	ec f7       	brge	.-6      	; 0x298 <BMX055_Write+0x2a>
 29e:	40 93 c3 08 	sts	0x08C3, r20	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 2a2:	e0 ec       	ldi	r30, 0xC0	; 192
 2a4:	f8 e0       	ldi	r31, 0x08	; 8
 2a6:	82 81       	ldd	r24, Z+2	; 0x02
 2a8:	88 23       	and	r24, r24
 2aa:	ec f7       	brge	.-6      	; 0x2a6 <BMX055_Write+0x38>
 2ac:	8c e1       	ldi	r24, 0x1C	; 28
 2ae:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
 2b2:	08 95       	ret

000002b4 <BMX055_Read>:
 2b4:	81 11       	cpse	r24, r1
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <BMX055_Read+0xc>
 2b8:	84 e0       	ldi	r24, 0x04	; 4
 2ba:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 2be:	0b c0       	rjmp	.+22     	; 0x2d6 <BMX055_Read+0x22>
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	21 f4       	brne	.+8      	; 0x2cc <BMX055_Read+0x18>
 2c4:	88 e0       	ldi	r24, 0x08	; 8
 2c6:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <BMX055_Read+0x22>
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	c1 f4       	brne	.+48     	; 0x300 <BMX055_Read+0x4c>
 2d0:	80 e1       	ldi	r24, 0x10	; 16
 2d2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
 2d6:	60 68       	ori	r22, 0x80	; 128
 2d8:	60 93 c3 08 	sts	0x08C3, r22	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 2dc:	e0 ec       	ldi	r30, 0xC0	; 192
 2de:	f8 e0       	ldi	r31, 0x08	; 8
 2e0:	82 81       	ldd	r24, Z+2	; 0x02
 2e2:	88 23       	and	r24, r24
 2e4:	ec f7       	brge	.-6      	; 0x2e0 <BMX055_Read+0x2c>
 2e6:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 2ea:	e0 ec       	ldi	r30, 0xC0	; 192
 2ec:	f8 e0       	ldi	r31, 0x08	; 8
 2ee:	82 81       	ldd	r24, Z+2	; 0x02
 2f0:	88 23       	and	r24, r24
 2f2:	ec f7       	brge	.-6      	; 0x2ee <BMX055_Read+0x3a>
 2f4:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
 2f8:	9c e1       	ldi	r25, 0x1C	; 28
 2fa:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
 2fe:	08 95       	ret
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	08 95       	ret

00000304 <RS232_Send>:

// Transmits a message to the main telemetry computer via USARTC0
void RS232_Send(uint8_t source, uint8_t length, uint8_t data[])
{
	// Transmit message source
	USARTC0.DATA = source;
 304:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	// Wait for buffer to clear
	while(!(USARTC0.STATUS & 0x10));
 308:	e0 ea       	ldi	r30, 0xA0	; 160
 30a:	f8 e0       	ldi	r31, 0x08	; 8
 30c:	81 81       	ldd	r24, Z+1	; 0x01
 30e:	84 ff       	sbrs	r24, 4
 310:	fd cf       	rjmp	.-6      	; 0x30c <RS232_Send+0x8>
	// Transmit message length
	USARTC0.DATA = length;
 312:	60 93 a0 08 	sts	0x08A0, r22	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	// Transmit message data
	for(uint8_t i = 0; i < length; i++)
 316:	66 23       	and	r22, r22
 318:	89 f0       	breq	.+34     	; 0x33c <RS232_Send+0x38>
 31a:	da 01       	movw	r26, r20
 31c:	61 50       	subi	r22, 0x01	; 1
 31e:	86 2f       	mov	r24, r22
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	48 0f       	add	r20, r24
 326:	59 1f       	adc	r21, r25
	{
		while(!(USARTC0.STATUS & 0x10));
 328:	e0 ea       	ldi	r30, 0xA0	; 160
 32a:	f8 e0       	ldi	r31, 0x08	; 8
 32c:	81 81       	ldd	r24, Z+1	; 0x01
 32e:	84 ff       	sbrs	r24, 4
 330:	fd cf       	rjmp	.-6      	; 0x32c <RS232_Send+0x28>
		USARTC0.DATA = data[i];
 332:	8d 91       	ld	r24, X+
 334:	80 83       	st	Z, r24
	// Wait for buffer to clear
	while(!(USARTC0.STATUS & 0x10));
	// Transmit message length
	USARTC0.DATA = length;
	// Transmit message data
	for(uint8_t i = 0; i < length; i++)
 336:	a4 17       	cp	r26, r20
 338:	b5 07       	cpc	r27, r21
 33a:	c1 f7       	brne	.-16     	; 0x32c <RS232_Send+0x28>
 33c:	08 95       	ret

0000033e <main>:
// Primary Telemetry Computer I/O functions
void RS232_Send(uint8_t source, uint8_t length, uint8_t data[]);


int main(void)
{
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	1f 92       	push	r1
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
    // --------------------- Clock Configuration ---------------------
	// Enable 32 MHz clock
	OSC.CTRL = OSC.CTRL | OSC_RC32MEN_bm;
 348:	e0 e5       	ldi	r30, 0x50	; 80
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	82 60       	ori	r24, 0x02	; 2
 350:	80 83       	st	Z, r24
	// Wait for 32 MHz clock to stabilize
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 352:	81 81       	ldd	r24, Z+1	; 0x01
 354:	81 ff       	sbrs	r24, 1
 356:	fd cf       	rjmp	.-6      	; 0x352 <main+0x14>
	// Set CPU clock to 32 MHz clock
	CCP = CCP_IOREG_gc;
 358:	88 ed       	ldi	r24, 0xD8	; 216
 35a:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	// Disable 2 MHz clock
	OSC.CTRL = OSC.CTRL & ~OSC_RC2MEN_bm;
 362:	e0 e5       	ldi	r30, 0x50	; 80
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	8e 7f       	andi	r24, 0xFE	; 254
 36a:	80 83       	st	Z, r24

	// --------------------- I/O Pins Configuration ---------------------
	// Setup SPI SS pins on port A
	PORTA.DIRSET = 0x1E;
 36c:	e0 e0       	ldi	r30, 0x00	; 0
 36e:	f6 e0       	ldi	r31, 0x06	; 6
 370:	8e e1       	ldi	r24, 0x1E	; 30
 372:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = 0x1E;
 374:	85 83       	std	Z+5, r24	; 0x05
	// Setup USARTC0 and SPIC pins on port C
	PORTC.DIRSET = 0xB8;
 376:	e0 e4       	ldi	r30, 0x40	; 64
 378:	f6 e0       	ldi	r31, 0x06	; 6
 37a:	88 eb       	ldi	r24, 0xB8	; 184
 37c:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET = 0x38;
 37e:	88 e3       	ldi	r24, 0x38	; 56
 380:	85 83       	std	Z+5, r24	; 0x05

	// --------------------- PMIC Configuration ---------------------
	// Enable medium and low priority interrupts
	PMIC.CTRL = PMIC_LOLVLEX_bm | PMIC_MEDLVLEN_bm;
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

	// --------------------- SPI Configuration ---------------------
	// Enable SPIC as master, mode 0, and set speed to 4 MHz
	SPIC.CTRL = SPI_CLK2X_bm | SPI_ENABLE_bm | SPI_MASTER_bm | SPI_PRESCALER0_bm;
 388:	91 ed       	ldi	r25, 0xD1	; 209
 38a:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>

	// --------------------- USART Configuration ---------------------
	// Set USCARTC0 receive interrupt to medium priority
	USARTC0.CTRLA = USART_RXCINTLVL_MED_gc;
 38e:	e0 ea       	ldi	r30, 0xA0	; 160
 390:	f8 e0       	ldi	r31, 0x08	; 8
 392:	90 e2       	ldi	r25, 0x20	; 32
 394:	93 83       	std	Z+3, r25	; 0x03
	// Set packet size to 8 bits
	USARTC0.CTRLC = USART_CHSIZE_8BIT_gc;
 396:	85 83       	std	Z+5, r24	; 0x05
	// Set baud rate to 115.2 kbs
	USARTC0.BAUDCTRLA = 0x83;
 398:	83 e8       	ldi	r24, 0x83	; 131
 39a:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB = 0x0D << 4;
 39c:	80 ed       	ldi	r24, 0xD0	; 208
 39e:	87 83       	std	Z+7, r24	; 0x07
	// Enable transmit and receive pins
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 3a0:	88 e1       	ldi	r24, 0x18	; 24
 3a2:	84 83       	std	Z+4, r24	; 0x04
	// Note that the USART defaults to no parity bit and 1 stop bit

	// --------------------- BMP280 Configuration ---------------------
	// Set barometer oversampling mode to high resolution (x8) and enable temperature sensor with no oversampling
	BMP280_Write(0xF4,0x33);
 3a4:	63 e3       	ldi	r22, 0x33	; 51
 3a6:	84 ef       	ldi	r24, 0xF4	; 244
 3a8:	0e 94 0a 01 	call	0x214	; 0x214 <BMP280_Write>

	// --------------------- BMX055 Configuration ---------------------
	// Set accelerometer bandwidth to 125 Hz (probably ok?)
	BMX055_Write(0,0x10,0x0C);
 3ac:	4c e0       	ldi	r20, 0x0C	; 12
 3ae:	60 e1       	ldi	r22, 0x10	; 16
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 37 01 	call	0x26e	; 0x26e <BMX055_Write>
	// Set accelerometer range to +/- 16 g
	BMX055_Write(0,0x0F,0x0C);
 3b6:	4c e0       	ldi	r20, 0x0C	; 12
 3b8:	6f e0       	ldi	r22, 0x0F	; 15
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 37 01 	call	0x26e	; 0x26e <BMX055_Write>
	// Shut off accelerometer slow calibration in the z-axis because this definitely won't like constant acceleration
	BMX055_Write(0,0x36,0x03);
 3c0:	43 e0       	ldi	r20, 0x03	; 3
 3c2:	66 e3       	ldi	r22, 0x36	; 54
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 37 01 	call	0x26e	; 0x26e <BMX055_Write>
	// Set gyroscope output data rate to 200 Hz and filter bandwidth to 64 Hz (probably ok?)
	BMX055_Write(1,0x10,0x06);
 3ca:	46 e0       	ldi	r20, 0x06	; 6
 3cc:	60 e1       	ldi	r22, 0x10	; 16
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 37 01 	call	0x26e	; 0x26e <BMX055_Write>
	// Set gyroscope range to 500 degrees/s
	BMX055_Write(1,0x0F,0x02);
 3d4:	42 e0       	ldi	r20, 0x02	; 2
 3d6:	6f e0       	ldi	r22, 0x0F	; 15
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 37 01 	call	0x26e	; 0x26e <BMX055_Write>
	// Set magnetometer x/y repetition to 47 and z repetition to 83 
	BMX055_Write(2,0x51,0x1B);
 3de:	4b e1       	ldi	r20, 0x1B	; 27
 3e0:	61 e5       	ldi	r22, 0x51	; 81
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	0e 94 37 01 	call	0x26e	; 0x26e <BMX055_Write>
	BMX055_Write(2,0x52,0x29);
 3e8:	49 e2       	ldi	r20, 0x29	; 41
 3ea:	62 e5       	ldi	r22, 0x52	; 82
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	0e 94 37 01 	call	0x26e	; 0x26e <BMX055_Write>
	// Set magnetometer output data rate to 20 Hz
	BMX055_Write(2,0x4C,0x23);
 3f2:	43 e2       	ldi	r20, 0x23	; 35
 3f4:	6c e4       	ldi	r22, 0x4C	; 76
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	0e 94 37 01 	call	0x26e	; 0x26e <BMX055_Write>
	uint8_t BMX055_gyro_en = 1;
	uint8_t BMX055_magnt_en = 1;

	// --------------------- Post-Configuration Tests ---------------------
	// In order to check that each sensor is active and not dead/malfunctioning, verify the chip id of each sensor
	uint8_t test_results = 0;
 3fc:	19 82       	std	Y+1, r1	; 0x01
	// Test BMP280
	if(BMP280_Read(0xD0) == 0x58) test_results |= 0x01;
 3fe:	80 ed       	ldi	r24, 0xD0	; 208
 400:	0e 94 1f 01 	call	0x23e	; 0x23e <BMP280_Read>
 404:	88 35       	cpi	r24, 0x58	; 88
 406:	19 f4       	brne	.+6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	81 60       	ori	r24, 0x01	; 1
 40c:	89 83       	std	Y+1, r24	; 0x01
	// Test BMX055 Accelerometer
	if(BMX055_Read(0,0x00) == 0xFA) test_results |= 0x02;
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <BMX055_Read>
 416:	8a 3f       	cpi	r24, 0xFA	; 250
 418:	19 f4       	brne	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	82 60       	ori	r24, 0x02	; 2
 41e:	89 83       	std	Y+1, r24	; 0x01
	// Test BMX055 Gyroscope
	if(BMX055_Read(1,0x00) == 0x0F) test_results |= 0x04;
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <BMX055_Read>
 428:	8f 30       	cpi	r24, 0x0F	; 15
 42a:	19 f4       	brne	.+6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	84 60       	ori	r24, 0x04	; 4
 430:	89 83       	std	Y+1, r24	; 0x01
	// Test BMX055 Magnetometer
	if(BMX055_Read(2,0x40) == 0x32) test_results |= 0x08;
 432:	60 e4       	ldi	r22, 0x40	; 64
 434:	82 e0       	ldi	r24, 0x02	; 2
 436:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <BMX055_Read>
 43a:	82 33       	cpi	r24, 0x32	; 50
 43c:	19 f4       	brne	.+6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	88 60       	ori	r24, 0x08	; 8
 442:	89 83       	std	Y+1, r24	; 0x01
	// Report status to Primary Telemetry Computer
	RS232_Send(0x01,1,&test_results);
 444:	ae 01       	movw	r20, r28
 446:	4f 5f       	subi	r20, 0xFF	; 255
 448:	5f 4f       	sbci	r21, 0xFF	; 255
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 82 01 	call	0x304	; 0x304 <RS232_Send>
	// Enable interrupts
	sei();
 452:	78 94       	sei
 454:	ff cf       	rjmp	.-2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>

00000456 <_exit>:
 456:	f8 94       	cli

00000458 <__stop_program>:
 458:	ff cf       	rjmp	.-2      	; 0x458 <__stop_program>
